/**
 * 
 */
package mai.models;

import mai.process.ShareMemory;

/**
 * Contain the index of a word in a dictionary.
 *	Each word has a {@link #status} variable at a time (0,1,2).
 *	Variable {@link #found} tell if the word is found on a cube or not
 */
public class Word{
	
	/**
	 * index of a word in a dictionary
	 */
	int wordIndex;
	
	

	/**
	 * a word is found on a cube or not
	 */
	boolean found;
	
	/**
	 *{@link #status} has 3 values:
	 * <li> 0 - when the current word hasn't been visited.
	 * <li> 1 - when the current word is visiting.
	 * <li> 2 - when all positions of the first letter of the current word on a cube is collected
	 */
	int status;
	
	public Word(int word_index) {
		this.wordIndex = word_index;
		this.found = false;
		this.status = 0;
	}
	
	/**
	 * get a word from a dictionary.
	 * @return the current {@link #word}
	 */
	public String getWord() {
		return ShareMemory.getDic().getWordList().get(wordIndex);
	}
	
	/**
	 * @return is the word found on a cube or not?
	 */
	public boolean isFound() {
		return found;
	}
	
	/**
	 * set the value of {@link #found} is true if the word is found, and false if cannot find it.
	 * @param found
	 */
	public void setFound(boolean found) {
		this.found = found;
	}
	
	/**
	 * @return {@link #status} of the current word.
	 */
	public int getStatus() {
		return status;
	}
	
	/**
	 * set the {@link #status} for the current word
	 * @param sta
	 */
	public void setStatus(int sta) {
		this.status = sta;
	}
	
	/**
	 * @return the wordIndex
	 */
	public int getWordIndex() {
		return wordIndex;
	}
	
	/**
	 * @return true if index of a word (>= 0) and (< size of the dictionary).
	 */
	public boolean invariant()
	{
		return (wordIndex >= 0) && (wordIndex <  ShareMemory.getDic().getDicSize());
	}
}
