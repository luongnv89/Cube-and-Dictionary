/**
 * 
 */
package mai.process;

import java.util.ArrayList;

import mai.models.Cube;
import mai.models.Dictionary;

/**
 * @author luongnv89
 * 
 */
public class Parallel2 extends Sequential {
	private boolean associated = true;
	ArrayList<Thread> threads = new ArrayList<Thread>();

	/**
	 * @param cube
	 * @param dic
	 */
	public Parallel2(Cube cube, Dictionary dic) {
		super(cube, dic);
	}

	@Override
	public boolean associatedDictionary() {
		if (!this.invariant()) {
			System.out.println("The initial of program is not valid!");
			return false;
		} else {
			for (int word_index = 0; word_index < dictionary.getDicSize(); word_index++) {
				if (associated) {
					final String word = dictionary.getWordList().get(word_index);
					Thread t = new Thread(new Runnable() {

						@Override
						public void run() {
							if (!foundWord(word)) {
								associated = false;
								for (int i = 0; i < threads.size(); i++) {
									if (threads.get(i).isAlive())
										threads.get(i).interrupt();
								}
							}

						}
					});
					threads.add(t);
					threads.get(threads.size() - 1).start();
					while(threads.size()<MAX_THREADS){
						
					}
				}
			}
			return associated;
		}
	}

}
