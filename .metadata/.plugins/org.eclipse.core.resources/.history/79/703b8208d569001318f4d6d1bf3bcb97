/**
 * 
 */
package csc5021.programs;

import csc5021.objects.Cube;
import csc5021.objects.Dictionary;
import csc5021.solutions.Parallel;
import csc5021.solutions.Sequential;
import csc5021.solutions.SolutionAbstracts;
import csc5021.utilities.Utilities;

/**
 * @author luongnv89
 * 
 */
public class PerformanceCompare {
	private static final String resultFile = "result.html";

	/**
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		System.out.println("Start testing......");
		runtest("data/cube/cube_500", "data/dic_associated/dic_associated_c_500_l_100_s_20");
		System.out.println("FINISHED!!");

	}

	private static void runtest(String cubePath, String dicPath) throws Exception {
		System.out.println("Seting up the testing environment....");
		long start = System.currentTimeMillis();
		Cube cube = new Cube(cubePath);
		Dictionary dic = new Dictionary(dicPath);
		long setupTime = System.currentTimeMillis() - start;
		System.out.println("The setup time: " + String.valueOf(setupTime) + " ms");
		
		Sequential seq = new Sequential(cube, dic);
		runtest(seq);
		Parallel par = new Parallel(cube, dic);
		runtest(par);
	}

	private static void runtest(SolutionAbstracts program) {
		boolean associated;
		long startTime = System.currentTimeMillis();
		String solutionName = "UNKNOWN SOLUTION!";
		if (program instanceof Sequential)
			solutionName = "SEQUENTIAL SOLUTION";
		else if (program instanceof Parallel)
			solutionName = "PARALLEL SOLUTION";
		System.out.println("\n***** " + solutionName + " *****\n");
		associated = program.checkAssociatedOfDictionary();
		long totalTime = System.currentTimeMillis() - startTime;
		System.out.println(solutionName + ": \n- Total time: " + String.valueOf(totalTime) + " ms\nResult: "
				+ String.valueOf(associated));
		Utilities.recordTest(solutionName,program.getCube().getSize(),program.getDic().getLength(),program.getDic().getSize(),associated,String.valueOf(totalTime),resultFile);
	}
}
