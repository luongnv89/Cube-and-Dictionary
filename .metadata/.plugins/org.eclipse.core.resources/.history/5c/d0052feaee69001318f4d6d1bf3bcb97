/**
 * 
 */
package mai.JUnit_Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import mai.models.Word;
import mai.process.ShareMemory;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class Word_JUnitTest extends CubeAndDic_TestSpec{

	private Word validWord;
	private Word invalidWord1;
	private Word invalidWord2;
	
	ShareMemory shareMemo;

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		shareMemo.setup(validCube, associatedDic);
		
		validWord = new Word(1);
		invalidWord1 = new Word(-1);
		invalidWord2 = new Word(200);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
		validWord = null;
		invalidWord1 = null;
		invalidWord2 = null;
		
		shareMemo = null;
	}

	/**
	 * Test method for {@link mai.models.Word#Word(int)}.
	 */
	@Test
	public void testWord() {
		assertFalse(validWord.isFound());
		assertEquals(0, validWord.getStatus());
	}

	/**
	 * Test method for {@link mai.models.Word#getWord()}.
	 */
	@Test
	public void testGetWord() {
		System.out.print(shareMemo.getDic().getWordList().get(validWord.getWordIndex()));
	}

	/**
	 * Test method for {@link mai.models.Word#setFound(boolean)}.
	 */
	@Test
	public void testSetFound() {
		validWord.setFound(true);
		assertTrue(validWord.isFound());
	}

	/**
	 * set status of a word from 0 to 1 (is visiting), then check method
	 * {@link Word#getStatus()}. If the value is 1, then @link
	 * Word#setStatus(int)} ok. Test method for
	 * {@link mai.models.Word#setStatus(int)}.
	 */
	@Test
	public void testSetStatus() {
		validWord.setStatus(1);
		assertEquals(1, validWord.getStatus());
	}
	
	/**
	 * Test method for {@link mai.models.Word#invariant()}
	 */
	@Test 
	public void testInvariant(){
		assertTrue(validWord.invariant());
		assertFalse(invalidWord1.invariant());
		assertFalse(invalidWord2.invariant());
	}

}
